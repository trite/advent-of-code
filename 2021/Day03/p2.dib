#!markdown

For when the default dotnet interactive output **SUCKS** (often right now):

#!fsharp

let plainify typeInfo =
    Formatter.SetPreferredMimeTypesFor(typeInfo, "text/plain")
    Formatter.Register(formatter = (fun x -> sprintf "%A" x))

plainify typeof<list<list<int>>>
plainify typeof<list<int>>

#!fsharp

let toCharArray (str : string) =
    str.ToCharArray()

let charToInt (c : char) =
    c.ToString() |> int

let convert lst =
    lst
    |> List.map (
        toCharArray
        >> Array.toList
        >> List.map charToInt
    )

let rawTestList =
    [
        "00100"
        "11110"
        "10110"
        "10111"
        "10101"
        "01111"
        "00111"
        "11100"
        "10000"
        "11001"
        "00010"
        "01010"
    ]

let testList =
    rawTestList
    |> convert

testList

#!fsharp

let toCamelCase word indexes =
    let mapping i c =
        match (indexes |> List.contains i) with
        | true                      -> Char.ToUpper(c)
        | _ when Char.IsUpper(c)    -> Char.ToLower(c)
        | _                         -> c

    word |> String.mapi mapping

[
    ("fsharP", [0; 1])
    ("nAtiveinterop", [0; 6])
    ("taskbuildereXtensions", [0; 4; 11])
    ("microsoftword", [0; 9])
]
|> List.map (fun (word, indexes) -> (word, indexes) ||> toCamelCase)

#!fsharp

let toCamelCase word indexes =
    let mapping i c =
        match List.contains i indexes with
        | true  -> Char.ToUpper(c)
        | false -> Char.ToLower(c)

    word |> String.mapi mapping

[
    "fsharP", [0; 1]
    "nAtiveinterop", [0; 6]
    "taskbuildereXtensions", [0; 4; 11]
    "microsoftword", [0; 9]
]
|> List.map (fun x -> x ||> toCamelCase)
